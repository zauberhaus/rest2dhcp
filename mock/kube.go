// Code generated by MockGen. DO NOT EDIT.
// Source: ./kubernetes/kube.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kubernetes "github.com/zauberhaus/rest2dhcp/kubernetes"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockKubeClient is a mock of KubeClient interface.
type MockKubeClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubeClientMockRecorder
}

// MockKubeClientMockRecorder is the mock recorder for MockKubeClient.
type MockKubeClientMockRecorder struct {
	mock *MockKubeClient
}

// NewMockKubeClient creates a new mock instance.
func NewMockKubeClient(ctrl *gomock.Controller) *MockKubeClient {
	mock := &MockKubeClient{ctrl: ctrl}
	mock.recorder = &MockKubeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeClient) EXPECT() *MockKubeClientMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockKubeClient) GetConfig(ctx context.Context, namespace, name, config string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, namespace, name, config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockKubeClientMockRecorder) GetConfig(ctx, namespace, name, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockKubeClient)(nil).GetConfig), ctx, namespace, name, config)
}

// GetService mocks base method.
func (m *MockKubeClient) GetService(ctx context.Context, namespace, name string) (*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", ctx, namespace, name)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockKubeClientMockRecorder) GetService(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockKubeClient)(nil).GetService), ctx, namespace, name)
}

// GetServicesForLB mocks base method.
func (m *MockKubeClient) GetServicesForLB(ctx context.Context) ([]*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesForLB", ctx)
	ret0, _ := ret[0].([]*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesForLB indicates an expected call of GetServicesForLB.
func (mr *MockKubeClientMockRecorder) GetServicesForLB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesForLB", reflect.TypeOf((*MockKubeClient)(nil).GetServicesForLB), ctx)
}

// Patch mocks base method.
func (m *MockKubeClient) Patch(ctx context.Context, namespace, name string, patch *kubernetes.Patch) (v10.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, namespace, name, patch)
	ret0, _ := ret[0].(v10.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockKubeClientMockRecorder) Patch(ctx, namespace, name, patch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockKubeClient)(nil).Patch), ctx, namespace, name, patch)
}

// Watch mocks base method.
func (m *MockKubeClient) Watch(ctx context.Context, resource string, objType runtime.Object) chan [2]v10.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, resource, objType)
	ret0, _ := ret[0].(chan [2]v10.Object)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockKubeClientMockRecorder) Watch(ctx, resource, objType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockKubeClient)(nil).Watch), ctx, resource, objType)
}
