// Code generated by MockGen. DO NOT EDIT.
// Source: ./dhcp/types.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dhcp "github.com/zauberhaus/rest2dhcp/dhcp"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockConnection) Block(ctx context.Context) chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", ctx)
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// Block indicates an expected call of Block.
func (mr *MockConnectionMockRecorder) Block(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockConnection)(nil).Block), ctx)
}

// Close mocks base method.
func (m *MockConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// Local mocks base method.
func (m *MockConnection) Local() *net.UDPAddr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Local")
	ret0, _ := ret[0].(*net.UDPAddr)
	return ret0
}

// Local indicates an expected call of Local.
func (mr *MockConnectionMockRecorder) Local() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Local", reflect.TypeOf((*MockConnection)(nil).Local))
}

// Receive mocks base method.
func (m *MockConnection) Receive(ctx context.Context) (chan *dhcp.DHCP4, chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", ctx)
	ret0, _ := ret[0].(chan *dhcp.DHCP4)
	ret1, _ := ret[1].(chan error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockConnectionMockRecorder) Receive(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockConnection)(nil).Receive), ctx)
}

// Remote mocks base method.
func (m *MockConnection) Remote() *net.UDPAddr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remote")
	ret0, _ := ret[0].(*net.UDPAddr)
	return ret0
}

// Remote indicates an expected call of Remote.
func (mr *MockConnectionMockRecorder) Remote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remote", reflect.TypeOf((*MockConnection)(nil).Remote))
}

// Send mocks base method.
func (m *MockConnection) Send(ctx context.Context, dhcp *dhcp.DHCP4) (chan int, chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, dhcp)
	ret0, _ := ret[0].(chan int)
	ret1, _ := ret[1].(chan error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockConnectionMockRecorder) Send(ctx, dhcp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConnection)(nil).Send), ctx, dhcp)
}
