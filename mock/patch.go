// Code generated by MockGen. DO NOT EDIT.
// Source: ./kubernetes/patch.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetaObject is a mock of MetaObject interface.
type MockMetaObject struct {
	ctrl     *gomock.Controller
	recorder *MockMetaObjectMockRecorder
}

// MockMetaObjectMockRecorder is the mock recorder for MockMetaObject.
type MockMetaObjectMockRecorder struct {
	mock *MockMetaObject
}

// NewMockMetaObject creates a new mock instance.
func NewMockMetaObject(ctrl *gomock.Controller) *MockMetaObject {
	mock := &MockMetaObject{ctrl: ctrl}
	mock.recorder = &MockMetaObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaObject) EXPECT() *MockMetaObjectMockRecorder {
	return m.recorder
}

// GetAnnotations mocks base method.
func (m *MockMetaObject) GetAnnotations() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotations")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetAnnotations indicates an expected call of GetAnnotations.
func (mr *MockMetaObjectMockRecorder) GetAnnotations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotations", reflect.TypeOf((*MockMetaObject)(nil).GetAnnotations))
}

// GetLabels mocks base method.
func (m *MockMetaObject) GetLabels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockMetaObjectMockRecorder) GetLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockMetaObject)(nil).GetLabels))
}
