name: Release workflow

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  release-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Start DHCP server
        id: dhcp
        run: |
          docker build -t dhcp -f Dockerfile.dhcp .
          DHCP_ID=`docker run -d --rm --name dhcp dhcp`  
          DHCP_IP=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' dhcp`
          echo ::set-output name=id::${DHCP_ID}
          echo ::set-output name=ip::${DHCP_IP}

      - name: Build test container
        run: docker build -t rest2dhcp:test -f Dockerfile.wf .  
  
      - name: Run udp tests
        run: docker run --rm -e SERVER=${{ steps.dhcp.outputs.ip }} -e MODE=udp rest2dhcp:test  

      - name: Run dual tests
        run: docker run --rm -e SERVER=${{ steps.dhcp.outputs.ip }} -e MODE=dual rest2dhcp:test  

      - name: Run packet tests
        run: docker run --rm -e SERVER=${{ steps.dhcp.outputs.ip }} -e MODE=packet rest2dhcp:test  

      - name: Stop DHCP
        if: steps.dhcp.outputs.id 
        run: |
          docker logs ${{ steps.dhcp.outputs.id }}  
          docker stop ${{ steps.dhcp.outputs.id }}  

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: release-tests
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Prepare 
      if: success()
      id: prepare
      run: |
        echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le
        echo ::set-output name=docker_image::docker.io/zauberhaus/rest2dhcp
        echo ::set-output name=version::${GITHUB_REF#refs/*/}
        echo ::set-output name=hash::${GITHUB_SHA}
        if echo "${GITHUB_REF#refs/*/}" | egrep "^v[1-9][0-9]*\.[0-9]+\.[0-9]+$" > /dev/null ; then
          echo ::set-output name=pre-release::false
        else
          echo ::set-output name=prerelease::true
        fi
      
    - name: Set up Docker Buildx      
      uses: crazy-max/ghaction-docker-buildx@v3      
          
    - name: Log into registry
      if: success()
      run: echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Run Buildx (master)
      if: success() && contains(steps.prepare.outputs.version, 'master')
      run: |
        docker buildx build \
          --output type=image,name=${{ steps.prepare.outputs.docker_image }},push=true \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
          --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.hash }}" \
          --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
          --file Dockerfile .

    - name: Run Buildx (non-master)
      if: success() && !contains(steps.prepare.outputs.version, 'master')
      run: |
        VERSION=$(echo "${{ steps.prepare.outputs.version }}" | sed -e 's/^v//')
        docker buildx build \
          --output type=image,name=${{ steps.prepare.outputs.docker_image }},push=true \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --tag "${{ steps.prepare.outputs.docker_image }}:$VERSION" \
          --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.hash }}" \
          --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
          --file Dockerfile .

    - name: Extract files from images  
      if: success()
      run: ./scripts/extract.sh && ls ./build

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: ${{ steps.prepare.outputs.prerelease }}
        
    - name: Upload amd64
      id: upload-release-asset-amd64 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/rest2dhcp-amd64
        asset_name: rest2dhcp-linux-x86_64
        asset_content_type: application/octet-stream

    - name: Upload 386
      id: upload-release-asset-386 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/rest2dhcp-386
        asset_name: rest2dhcp-linux-386
        asset_content_type: application/octet-stream

    - name: Upload arm64
      id: upload-release-asset-arm64 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/rest2dhcp-arm64
        asset_name: rest2dhcp-linux-arm64
        asset_content_type: application/octet-stream
  
    - name: Upload arm-v6
      id: upload-release-asset-arm-v6
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/rest2dhcp-arm-v6
        asset_name: rest2dhcp-linux-arm-v6
        asset_content_type: application/octet-stream

    - name: Upload arm-v7
      id: upload-release-asset-arm-v7
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/rest2dhcp-arm-v7
        asset_name: rest2dhcp-linux-arm-v7
        asset_content_type: application/octet-stream        

    - name: Upload ppc64le
      id: upload-release-asset-ppc64le
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/rest2dhcp-ppc64le
        asset_name: rest2dhcp-linux-ppc64le
        asset_content_type: application/octet-stream                