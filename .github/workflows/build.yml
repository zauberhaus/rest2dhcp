# This is a basic workflow to help you get started with Actions

name: Release

on:
  push:    
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  release_test:
    strategy:
      matrix:
        goversion: ['1.16']
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install Go
      if: success()
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.goversion }}
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Run tests 
      run: |
        go get github.com/mjibson/esc
        go generate ./service/server.go
        go test -v -race ./...

  release_integration_test:
    strategy:
      matrix:
        goversion: ['1.16']
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install Go
      if: success()
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.goversion }}
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Integration tests 
      run: |
        go install github.com/onsi/ginkgo/ginkgo
        cd tests && \
        ./run.sh

  build:
    runs-on: ubuntu-latest
    needs: [release_test, release_integration_test]
    steps:
    - name: Install Go
      if: success()
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

    - name: Check out code
      uses: actions/checkout@v2

    - name: Prepare 
      if: success()
      id: prepare
      run: |
        echo ::set-output name=version::${GITHUB_REF#refs/*/}
        echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le
        echo ::set-output name=docker_image::docker.io/${{ secrets.DOCKER_USERNAME }}/rest2dhcp
        echo ::set-output name=hash::${GITHUB_SHA}
        if echo "${GITHUB_REF#refs/*/}" | egrep "^v[1-9][0-9]*\.[0-9]+\.[0-9]+$" > /dev/null ; then
          echo ::set-output name=pre-release::false
        else
          echo ::set-output name=prerelease::true
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all      
      
    - name: Set up Docker Buildx      
      uses: docker/setup-buildx-action@v1.1.1
          
    - name: Log into registry
      if: success()
      run: echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Buildx
      if: success() && !contains(steps.prepare.outputs.version, 'master')
      run: |
        VERSION=$(echo "${{ steps.prepare.outputs.version }}" | sed -e 's/^v//')
        #V=$(echo "${{ steps.prepare.outputs.version }}" | sed -e 's/-.*$//')
        docker buildx build \
          --output type=image,name=${{ steps.prepare.outputs.docker_image }},push=true \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --tag "${{ steps.prepare.outputs.docker_image }}:$VERSION" \
          --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.hash }}" \
          --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
          --build-arg TAG="$V" \
          --file Dockerfile .

    - name: Extract files from images  
      if: success()
      run: |
        VERSION=$(echo "${{ steps.prepare.outputs.version }}" | sed -e 's/^v//')
        ./scripts/extract.sh $VERSION && \
        ls ./build

    - name: Build darwin executable  
      run: |
        go get github.com/mjibson/esc
        go generate ./service/server.go
        GOARCH=amd64 GOOS=darwin go build -o build2/rest2dhcp-darwin-amd64
        GOARCH=arm64 GOOS=darwin go build -o build2/rest2dhcp-darwin-arm64

    - name: Create Release
      if: success() && !contains(steps.prepare.outputs.version, 'master')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.prepare.outputs.version }}
        release_name: Release ${{ steps.prepare.outputs.version }}
        draft: false
        prerelease: ${{ steps.prepare.outputs.prerelease }}

    - name: Upload 386
      id: upload-release-asset-386 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/rest2dhcp-386
        asset_name: rest2dhcp-linux-386
        asset_content_type: application/octet-stream

    - name: Upload amd64
      id: upload-release-asset-amd64 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./build/rest2dhcp-amd64
        asset_name: rest2dhcp-linux-x86_64
        asset_content_type: application/octet-stream

    - name: Upload arm64
      id: upload-release-asset-arm64 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/rest2dhcp-arm64
        asset_name: rest2dhcp-linux-arm64
        asset_content_type: application/octet-stream

    - name: Upload arm-v7
      id: upload-release-asset-arm-v7
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/rest2dhcp-arm-v7
        asset_name: rest2dhcp-linux-arm-v7
        asset_content_type: application/octet-stream        

    - name: Upload ppc64le
      id: upload-release-asset-ppc64le
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/rest2dhcp-ppc64le
        asset_name: rest2dhcp-linux-ppc64le
        asset_content_type: application/octet-stream        

    - name: Upload darwin-amd64
      id: upload-release-asset-darwin-amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/rest2dhcp-darwin-amd64
        asset_name: rest2dhcp-darwin-amd64
        asset_content_type: application/octet-stream        

    - name: Upload darwin-arm64
      id: upload-release-asset-darwin-arm64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/rest2dhcp-darwin-arm64
        asset_name: rest2dhcp-darwin-arm64
        asset_content_type: application/octet-stream        
